{"version":3,"sources":["images/money.png","components/Option.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Option","Fragment","value","Component","App","props","swap","fetchData","state","currencyTwo","updateState","setState","currencyOne","items","amountOne","handleChange","bind","event","key","obj","target","this","rates","fromCurrency","callback","fetch","then","res","json","result","className","src","logo","for","type","id","placeholder","onChange","e","defaultValue","onClick","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a521a89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/money.8ebfab8f.png\";","import React, {Component} from 'react';\r\n\r\nclass Option extends Component {\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <option value=\"AED\">AED</option>\r\n        <option value=\"ARS\">ARS</option>\r\n        <option value=\"AUD\">AUD</option>\r\n        <option value=\"BGN\">BGN</option>\r\n        <option value=\"BRL\">BRL</option>\r\n        <option value=\"BSD\">BSD</option>\r\n        <option value=\"CAD\">CAD</option>\r\n        <option value=\"CHF\">CHF</option>\r\n        <option value=\"CLP\">CLP</option>\r\n        <option value=\"CNY\">CNY</option>\r\n        <option value=\"COP\">COP</option>\r\n        <option value=\"CZK\">CZK</option>\r\n        <option value=\"DKK\">DKK</option>\r\n        <option value=\"DOP\">DOP</option>\r\n        <option value=\"EGP\">EGP</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"FJD\">FJD</option>\r\n        <option value=\"GBP\">GBP</option>\r\n        <option value=\"GTQ\">GTQ</option>\r\n        <option value=\"HKD\">HKD</option>\r\n        <option value=\"HRK\">HRK</option>\r\n        <option value=\"HUF\">HUF</option>\r\n        <option value=\"IDR\">IDR</option>\r\n        <option value=\"ILS\">ILS</option>\r\n        <option value=\"INR\">INR</option>\r\n        <option value=\"ISK\">ISK</option>\r\n        <option value=\"JPY\">JPY</option>\r\n        <option value=\"KRW\">KRW</option>\r\n        <option value=\"KZT\">KZT</option>\r\n        <option value=\"MXN\">MXN</option>\r\n        <option value=\"MYR\">MYR</option>\r\n        <option value=\"NOK\">NOK</option>\r\n        <option value=\"NZD\">NZD</option>\r\n        <option value=\"PAB\">PAB</option>\r\n        <option value=\"PEN\">PEN</option>\r\n        <option value=\"PHP\">PHP</option>\r\n        <option value=\"PKR\">PKR</option>\r\n        <option value=\"PLN\">PLN</option>\r\n        <option value=\"PYG\">PYG</option>\r\n        <option value=\"RON\">RON</option>\r\n        <option value=\"RUB\">RUB</option>\r\n        <option value=\"SAR\">SAR</option>\r\n        <option value=\"SEK\">SEK</option>\r\n        <option value=\"SGD\">SGD</option>\r\n        <option value=\"THB\">THB</option>\r\n        <option value=\"TRY\">TRY</option>\r\n        <option value=\"TWD\">TWD</option>\r\n        <option value=\"UAH\">UAH</option>\r\n        <option value=\"USD\">USD</option>\r\n        <option value=\"UYU\">UYU</option>\r\n        <option value=\"VND\">VND</option>\r\n        <option value=\"ZAR\">ZAR</option>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Option;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Option from './components/Option.js';\r\nimport logo from './images/money.png';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: {},\r\n      currencyOne: \"USD\",\r\n      currencyTwo: \"EUR\",\r\n      amountOne: 0\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n\r\n //use bind\r\n  handleChange(event, key) {\r\n    let obj = {};\r\n    obj[key] = event.target.value;\r\n    this.setState(obj, () => {\r\n      this.fetchData(this.state.currencyOne, this.updateState);\r\n    });\r\n  }\r\n\r\n  swap = ()=> {\r\n    //if click too fast will occur bug\r\n    this.fetchData(this.state.currencyTwo, this.updateState)\r\n    this.setState({currencyOne: this.state.currencyTwo, currencyTwo:this.state.currencyOne});\r\n\r\n    //this.fetchData(this.state.currencyTwo, this.state.currencyOne, this.updateState);\r\n  }\r\n\r\n  updateState(rates) {\r\n    this.setState({\r\n      //  currencyOne:fromCurrency,\r\n      //  currencyTwo:toCurrency,\r\n        items:rates\r\n    });\r\n  }\r\n\r\n  fetchData(fromCurrency, callback) {\r\n    fetch(`https://api.exchangerate-api.com/v4/latest/${fromCurrency}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          callback(result.rates);\r\n        },\r\n      )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData(this.state.currencyOne, this.updateState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <img src={logo}></img>\r\n        <h1>Exchange Rate Calculator</h1>\r\n        <p>Choose the currency and the amounts to get the exchange rate</p>\r\n        <div className=\"exchanger\">\r\n          <div className=\"amount labeled\">\r\n              <label for=\"amount\">Amount</label>\r\n              <input type=\"number\" id=\"amount\" placeholder={0} onChange={(e) => this.setState({ amountOne: e.target.value })} />\r\n          </div>\r\n          <div className=\"from labeled\">\r\n            <label for=\"from\">From</label>\r\n            <select id=\"from\" defaultValue=\"USD\" value={this.state.currencyOne} onChange={(e) => this.handleChange(e, 'currencyOne')}>\r\n              <Option />\r\n            </select>\r\n          </div>\r\n          <div className=\"swapButton\">\r\n            <button onClick={this.swap}>Swap</button>\r\n          </div>\r\n          <div className=\"to labeled\">\r\n            <label for=\"to\">To</label>\r\n            <select id=\"to\" defaultValue=\"EUR\" value={this.state.currencyTwo}\r\n              onChange={(e) => {\r\n                   this.handleChange(e, \"currencyTwo\");\r\n              }}>\r\n              <Option />\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <p className=\"rate\">1{this.state.currencyOne} = {this.state.items[this.state.currencyTwo]} {this.state.currencyTwo}</p>\r\n        <div className=\"result\">\r\n          <h2>Result</h2>\r\n          <p>{ (this.state.items[this.state.currencyTwo] * this.state.amountOne).toFixed(2)}</p>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}